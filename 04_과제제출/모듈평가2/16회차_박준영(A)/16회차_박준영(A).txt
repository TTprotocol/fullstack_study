-- -----------------------------------------
-- 	SQL문제 1번
-- -----------------------------------------
-- 1-1
select * from city;

-- 1-2
select Language, Percentage 
from countrylanguage 
where CountryCode = "CHE"
;

-- 1-3
insert into city(Name, CountryCode, District, Population) values(
'Cairo', 'EGY', 'Cairo Governorate', 9500000
);

-- 1-4
update city
set Name = "GoodSite"
where CountryCode = "PNG"
;

-- 1-5
select * from country order by Name desc;

-- -----------------------------------------
-- 	SQL문제 2번
-- -----------------------------------------
-- 2-1
select upper(Name) from city;

-- 2-2
select concat(ID, "-", CountryCode) from city;

-- 2-3
select length(District) from city;

-- 2-4
select avg(Population) from city;

-- 2-5
select Continent, max(GNP)
from country
group by Continent
order by max(GNP) asc
;

-- -----------------------------------------
-- 	SQL문제 3번
-- -----------------------------------------
-- 3-1
select ct.Name, co.Name
from city ct
inner join country co
on ct.CountryCode = co.Code
;

-- 3-2
select co.Name, la.Language
from country co
left outer join countrylanguage la
on co.Code = la.CountryCode 
;

-- 3-3
select Name
from city
where ID = (
	select ID
	from city
	group by ID
	order by  max(Population) desc
	limit 1
)
;

-- -----------------------------------------
-- 	JDBC문제 4번
-- -----------------------------------------
-- 4-1
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class City {
    private int id;
    private String name;
    private String countryCode;
    private String district;
    private int population;
}

-- 4-2
public void insert(City city) {
        //SQL문 완성
        String sql = "insert into city(Name, CountryCode, District, Population) values(?, ?, ?, ?)";

        /***********************************************
         * 구현 코드
         */

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, city.getName());
            pstmt.setString(2, city.getCountryCode());
            pstmt.setString(3, city.getDistrict());
            pstmt.setInt(4, city.getPopulation());

            int count = pstmt.executeUpdate();

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    } //insert기능 구현

-- -----------------------------------------
-- 	JDBC문제 5번
-- -----------------------------------------
-- 5-1
public List<City> selectList(int size) {
        List<City> cityList = new ArrayList<>();
        String sql = "SELECT * FROM city ORDER BY Population DESC LIMIT ?";

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, size);

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    City city = map(rs);
                    cityList.add(city);
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return cityList;
    }

    private City map(ResultSet rs) throws SQLException {
        return City.builder()
            .id(rs.getInt("ID"))
            .name(rs.getString("Name"))
            .countryCode(rs.getString("CountryCode"))
            .district(rs.getString("District"))
            .population(rs.getInt("Population"))
            .build();
    }

-- 5-2
public void printCity(City city) {
        System.out.print("아이디>> " + city.getId());
        System.out.print(",\t 국가코드>> " + city.getCountryCode());
        System.out.print(",\t 지역명>> " + city.getName());
        System.out.println(",\t 인구수>> " + city.getPopulation());
    }

-- -----------------------------------------
-- 	JDBC문제 6번
-- -----------------------------------------
-- 6-1
public City selectOne(int id) {
        City city = null;
        String sql = "select * from city where ID = ?";
        try (
            PreparedStatement pstmt = conn.prepareStatement(sql)
        ) {
            pstmt.setInt(1, id);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    city = map(rs);
                }
                
                return city;

            } catch (SQLException e) {
                throw new RuntimeException(e);
            }

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

private City map(ResultSet rs) throws SQLException {
        return City.builder()
            .id(rs.getInt("ID"))
            .name(rs.getString("Name"))
            .countryCode(rs.getString("CountryCode"))
            .district(rs.getString("District"))
            .population(rs.getInt("Population"))
            .build();
    }

-- 6-2
public void showOne() {
        System.out.print("추출할 도시 ID>>  ");
        int id = sc.nextInt();

        City city = cityDao.selectOne(id);

        // 결과 출력 (헤더)
        if (city != null) {
            printCity(city);
        } else {
            System.out.println("해당 도시가 없습니다.");
        }
    }
